# -*- coding: utf-8 -*-
"""skin_infection_dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qKwAR0B_9fwkONqPLimBkq57KO8PE5FS
"""



"""# Importation and setting up"""

import tensorflow as tf

print(tf.__version__)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

import matplotlib.image as mpimg

from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

"""# Data Preprocessing"""

#from google.colab import files
#uploaded = files.upload()

#!unzip  /content/skin-infection-dataset.zip -d /tmp/skin_dataset

image = mpimg.imread("/tmp/skin_dataset/skin-disease-datasaet/test_set/BA-impetigo/10_BA-impetigo (89).jpg")

plt.imshow(image)
plt.colorbar()

from tensorflow.keras.preprocessing.image import ImageDataGenerator

image_dataset = ImageDataGenerator(rescale=1.0/255,
                                   zoom_range=0.2,
                                   shear_range=0.2,
                                   horizontal_flip=True,
                                   validation_split=0.2)

train_generator = image_dataset.flow_from_directory(
    "/tmp/skin_dataset/skin-disease-datasaet/train_set",
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

validation_generator = image_dataset.flow_from_directory(
    "/tmp/skin_dataset/skin-disease-datasaet/test_set",
    target_size=(128, 128),
    batch_size=32,
    class_mode='categorical',
    subset='training'
)

"""#Building the model"""

model = Sequential([
    Conv2D(32, (3, 3), activation='relu',  input_shape=(128, 128, 3)),
    MaxPooling2D(2, 2),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.4),
    Dense(8,  activation='softmax')
])

model.summary()

opt = tf.keras.optimizers.Adam(learning_rate=0.0001)
model.compile(optimizer=opt,
              loss='categorical_crossentropy',
               metrics=['accuracy'])

"""# Training the model"""

history = model.fit(train_generator, epochs=50, validation_data=validation_generator)

y_pred = np.argmax(model.predict(validation_generator), axis=-1)

from  sklearn.metrics import classification_report

print(classification_report(validation_generator.classes, y_pred))

